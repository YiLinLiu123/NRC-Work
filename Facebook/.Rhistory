names(single_Post)
class(single_Post)
head(single_Post[["comments"]]$id)
## I have extracted the list of comments_Id from the post_information
## the "comments" is a data frame where the column "id" represents the list of comments to the posts and each element within this "id" is another list of comment_ids.
## I have printed out such a comment Id below (note, I had to subset the list twice).
comments_Id = lapply(post_Information, function(x){x[["comments"]]$id})
comments_Id[[1]][[1]]
#Extracting the comment replies to each posts' comments
## The following returns an unexpected error, because the facebook API throughs an error:
## "Unsupported get request. Object with ID '10154406740582217_10154386779424205' does not exist, cannot be loaded due to missing permissions, or does not support this operation.
single_Comment_Reply = getCommentReplies(comments_Id[[1]][[1]],token=token)
single_Comment_Reply2 = getCommentReplies(comments_Id[[1]][[99]],token=token)
##Loading Libraries needed for the rest of the report:
library(jsonlite)
library(knitr)
library(Rfacebook)
knitr::opts_chunk$set(error=T,warning=TRUE)
rm(list = ls())
# The following is just to illustrate the information I recieved:
API_Explorer_Parameters = c("/me")
API_Response = jsonlite::toJSON(data.frame(name = "Paul Liu", id = "10207154569334139"))
fromJSON(API_Response)
rm(list = ls())
# creating a folder under current working directory to store any data.
if(!dir.exists("Rfacebook Exploration"))
{
dir.create("Rfacebook Exploration")
}
folder_Path  = "Rfacebook Exploration"
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
app_Id = 1353820787971442
app_Secret = "4841ab73f4f68960ebbf37e5705e2610"
## The following shows the code that calls the fbOAuth function and creates the OAuth token, it has been commented once executed and the result is saved in a file called "my_OAuth.txt" Please run the following code in case the file does not exist.
# token = fbOAuth(app_id = app_Id,app_secret = app_Secret,extended_permissions = TRUE)
# if(!file.exists("My_OAuth"))
#  {
#      file.create("My_OAuth.txt")
#      save(token, file= "My_OAuth.txt")
#  }
load("My_OAuth.txt")
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
##Extracting my personnal information
my_Data = callAPI("https://graph.facebook.com/me", token)
## Extracting my ID, this can be passed on as the ids for other functions
my_id = my_Data$id
print(my_Data)
##Adding fields to the URL to gain specific information (birthday, age_range)
#no spaces anywhere within the URL should be included
my_Specific_Information_Request = "https://graph.facebook.com/me?fields=birthday,age_range"
my_Specific_Data = callAPI(my_Specific_Information_Request,token)
print(my_Specific_Data)
## Trying to form nested levels of field requests. Gonna try to extract information regarding the "abouts" of the games I like
my_Games_Request= "https://graph.facebook.com/me?fields=games{about}"
my_Games = callAPI(my_Games_Request,token)
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
##Extracting facebook page basic information. The url of the page is: https://www.facebook.com/harrypottermovie/
harry_Potter_Request = "https://graph.facebook.com/https://www.facebook.com/harrypottermovie/"
Harry_Potter_Page = callAPI(harry_Potter_Request,token=token)
print(Harry_Potter_Page)
##Trying to extract other fields as well using the callAPI function
harry_Potter_More = paste("https://graph.facebook.com",Harry_Potter_Page$id,"posts?fields=message",sep="/")
information = callAPI(harry_Potter_More,token=token)
names(information)
class(information)
length(information$data)
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
## Extracing information about a post/comment: URL of comment to a post:     https://www.facebook.com/bbcnews/posts/10154388838082217?comment_id=10154388923362217&comment_tracking=%7B%22tn%22%3A%22R0%22%7D
#     This was obtained by clicking on the "time stamp"  of a facebook post. NOTE: the comment URL also contains the original post URL, which in this case is: https://www.facebook.com/bbcnews/posts/10154388838082217
comment_URL = "https://www.facebook.com/bbcnews/posts/10154388838082217?comment_id=10154388923362217&comment_tracking=%7B%22tn%22%3A%22R0%22%7D"
comment = callAPI(comment_URL,token = token)
## The following is to write the intake HTML file and trying to see whats wrong
# comment_Data = GET(comment_URL,config(token=token))
# processed_data = rawToChar(comment_Data$content)
# comment_file = paste(folder_Path,"comment_content.txt",sep="/")
# if(!file.exists(comment_file))
# {
#     file.create(comment_file)
#     write(processed_data,comment_file)
#
# }
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
stop("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*", x=object_URL)!= beginning_Index ) {
stop("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_is = url_Data$id
}
#   testCase1 = "https://graph.facebook.com/https://www.facebook.com/bbcnews" (fixed a bug, previous used grepl which returned true as long as the regular expression existed in the URL, leads to testCase1 to be recognized as a "Valid URL" )
#Extracting the BBC webpage ID: (feels like this should be my own function.)
facebook_API_URL = "https://graph.facebook.com"
BBC_URL = "https://www.facebook.com/bbcnews"
BBC_Id = FbObjectId(BBC_URL,token)
print(BBC_Id)
#Now I can specify the "Edge" parameter of the Get query through placing "/posts"
posts_Query = url <- paste0("https://graph.facebook.com/", BBC_Id, "/posts?fields=from,message,created_time,type,link,story,comments.summary(true)",
",likes.summary(true),shares")
posts= callAPI(posts_Query,token)
class(posts$data)
# at this stage, I am having trouble "subsetting" this list into more mangeable chunks: IE: have each individual post divided according to individual posts.It is currently outside my knowledge level to further subset this lists of elements. Such the pre-build pacakge is better because it organizes the information into dataframes.
## the getPage function returns a matrix, and one of the columns is the "postId"
page_Information = getPage(BBC_Id,token)
class(page_Information)
dim(page_Information)
names(page_Information)
post_Ids = page_Information$id
## trying to see getPost can be vectorized, it appears to be working through the use of lapply
## The return type is a list of posts and each element within this represents the information for     a single post. Each "post" is a list composed of three sections: "post","likes","comments".
post_Information = lapply(post_Ids,getPost,n=100,token=token)
names(post_Information[[2]])
### for a single post_Id, the get post function behaves as expected
single_Post = getPost(post_Ids[[2]],n=100,token=token)
names(single_Post)
class(single_Post)
head(single_Post[["comments"]]$id)
## I have extracted the list of comments_Id from the post_information
## the "comments" is a data frame where the column "id" represents the list of comments to the posts and each element within this "id" is another list of comment_ids.
## I have printed out such a comment Id below (note, I had to subset the list twice).
comments_Id = lapply(post_Information, function(x){x[["comments"]]$id})
comments_Id[[1]][[1]]
#Extracting the comment replies to each posts' comments
## The following returns an unexpected error, because the facebook API throughs an error:
## "Unsupported get request. Object with ID '10154406740582217_10154386779424205' does not exist, cannot be loaded due to missing permissions, or does not support this operation.
single_Comment_Reply = getCommentReplies(comments_Id[[1]][[1]],token=token)
single_Comment_Reply2 = getCommentReplies(comments_Id[[1]][[99]],token=token)
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
stop("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*", x=object_URL)!= beginning_Index ) {
stop("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_is = url_Data$id
}
#   testCase1 = "https://graph.facebook.com/https://www.facebook.com/bbcnews" (fixed a bug, previous used grepl which returned true as long as the regular expression existed in the URL, leads to testCase1 to be recognized as a "Valid URL" )
#Extracting the BBC webpage ID: (feels like this should be my own function.)
facebook_API_URL = "https://graph.facebook.com"
BBC_URL = "https://www.facebook.com/bbcnews"
BBC_Id = FbObjectId(BBC_URL,token)
print(BBC_Id)
#Now I can specify the "Edge" parameter of the Get query through placing "/posts"
posts_Query = url <- paste0("https://graph.facebook.com/", BBC_Id, "/posts?fields=from,message,created_time,type,link,story,comments.summary(true)",
",likes.summary(true),shares")
posts= callAPI(posts_Query,token)
class(posts$data)
# at this stage, I am having trouble "subsetting" this list into more mangeable chunks: IE: have each individual post divided according to individual posts.It is currently outside my knowledge level to further subset this lists of elements. Such the pre-build pacakge is better because it organizes the information into dataframes.
## the getPage function returns a matrix, and one of the columns is the "postId"
page_Information = getPage(BBC_Id,token)
class(page_Information)
dim(page_Information)
names(page_Information)
post_Ids = page_Information$id
## trying to see getPost can be vectorized, it appears to be working through the use of lapply
## The return type is a list of posts and each element within this represents the information for     a single post. Each "post" is a list composed of three sections: "post","likes","comments".
post_Information = lapply(post_Ids,getPost,n=100,token=token)
names(post_Information[[2]])
### for a single post_Id, the get post function behaves as expected
single_Post = getPost(post_Ids[[2]],n=100,token=token)
names(single_Post)
class(single_Post)
head(single_Post[["comments"]]$id)
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
paste(test1,FbObjectId(test1,token),sep = ": ")
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
original_Return = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313: https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
paste(test1,FbObjectId(test1,token),sep = ": ")
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
stop("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*", x=object_URL)!= beginning_Index ) {
stop("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_id = url_Data$id
if(grep(pattern ="[0-9]*")!= beginning_Index){
stop("Error In Returned ID: Not numeric values. URL likely not supported.")
}
url_id
}
#   testCase1 = "https://graph.facebook.com/https://www.facebook.com/bbcnews" (fixed a bug, previous used grepl which returned true as long as the regular expression existed in the URL, leads to testCase1 to be recognized as a "Valid URL" )
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
original_Return = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313: https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
paste(test1,FbObjectId(test1,token),sep = ": ")
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
stop("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*", x=object_URL)!= beginning_Index ) {
stop("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_id = url_Data$id
if(grep(pattern ="[0-9]*",x=url_id)!= beginning_Index){
stop("Error In Returned ID: Not numeric values. URL likely not supported.")
}
url_id
}
#   testCase1 = "https://graph.facebook.com/https://www.facebook.com/bbcnews" (fixed a bug, previous used grepl which returned true as long as the regular expression existed in the URL, leads to testCase1 to be recognized as a "Valid URL" )
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
original_Return = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313: https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
paste(test1,FbObjectId(test1,token),sep = ": ")
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
stop("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*", x=object_URL)!= beginning_Index ) {
stop("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_id = url_Data$id
if(grep(pattern ="[0-9]*",x=url_id)){
stop("Error In Returned ID: Not numeric values. URL likely not supported.")
}
url_id
}
#   testCase1 = "https://graph.facebook.com/https://www.facebook.com/bbcnews" (fixed a bug, previous used grepl which returned true as long as the regular expression existed in the URL, leads to testCase1 to be recognized as a "Valid URL" )
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
original_Return = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313: https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
paste(test1,FbObjectId(test1,token),sep = ": ")
as.data.frame()
## A URL of a post on the public facebook page Harry Potter
test1 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
original_Return = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313: https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313"
new_Return = "Error in FbObjectId(test1, token) : Error In Returned ID: Not numeric values. URL likely not supported."
# paste(test1,FbObjectId(test1,token),sep = ": ")
test2 = "https://www.facebook.com/harrypottermovie/photos/a.422515109312.180796.156794164312/10155042492264313/?type=3&comment_id=10155042702764313&comment_tracking=%7B%22tn%22%3A%22R4%22%7D"
paste(test2, FbObjectId(test2,token), sep=": ")
paste(test3, FbObjectId(test3,token), sep=": ")
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field
with a valid location.",
"Contains a location field, often yields no useful response.
This location yield is automatically returned under the
searchPages function of Rfacebook.",
"Contains a place field, but usually returns NULL when
requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field
with a valid location.",
"Contains a location field, often yields no useful response.This location yield is automatically returned under the
searchPages function of Rfacebook.",
"Contains a place field, but usually returns NULL when
requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field
with a valid location.",
"Contains a location field, often yields no useful response.",
"Contains a place field, but usually returns NULL when
requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field
with a valid location.",
"Contains a location field, often yields no useful response.",
"Contains a place field, but usually returns NULL when requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field with a valid location.",
"Contains a location field, often yields no useful response.",
"Contains a place field, but usually returns NULL when requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
structure = c(
"nodes",
"edges",
"fields"
)
description = c(
"Objects of facebook API. Nodes are \"things\" like Users, page, Group, comments etc.
Each node has its' own ID that which is used to access it via the Graph API.",
"The connections that leads from one node to another.
For example: the cover photo of a user, the comments and posts on a user's timeline.
Edges are identified by a name",
"Information about the nodes, like the names, Id, birthday etc of a user.Fields are identified by a name."
)
summary = data.frame(structure,description)
knitr::kable(summary,col.names = c("Structure","Description"))
rm(list=ls())
advantages = c(
"Clear documentation.",
"High level of Abstraction, so no need to worry about the specifics.",
"Good variety of functions that can provide data for data mining.",
"The source code provides a structure to parse any arbitary facbook API response."
)
disadvantages = c(
"Assumes that the data being searched for exists.
If an error is thrown by the Facebook API, the search stops.",
"Many functions are no longer supported due to upgraded Facebook API.",
"Limited range of fields and edges, does not support
the extraction of any arbitrary fields and edges.",
"Many functions are deprecated due to API version update."
)
summary = data.frame(advantages,disadvantages)
knitr::kable(summary,col.names = c("Advantages","Disadvantages"))
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
functions = c("getCheckins","getFQLS","getFriends","getNetwork","searchFacebook")
description = c("deprecated","deprecated",
"only your friends who uses your application",
"only applicable to users of your application"
,"deprecated")
table= data.frame(functions, description)
knitr::kable(table,col.names=c("functions","description"))
# creating a folder under current working directory to store any data.
if(!dir.exists("Rfacebook Exploration"))
{
dir.create("Rfacebook Exploration")
}
folder_Path  = "Rfacebook Exploration"
rm(list = setdiff(ls(),c("folder_Path","token","FbObjectId") ))
##Loading Libraries needed for the rest of the report:
library(jsonlite)
library(knitr)
library(Rfacebook)
knitr::opts_chunk$set(error=T,warning=TRUE)
rm(list = ls())
app_Id = 1353820787971442
app_Secret = "4841ab73f4f68960ebbf37e5705e2610"
## The following shows the code that calls the fbOAuth function and creates the OAuth token,
## it has been commented once executed and the result is saved in a file
## called "my_OAuth.txt" Please run the following code in case the file does not exist.
# token = fbOAuth(app_id = app_Id,app_secret = app_Secret,extended_permissions = TRUE)
# if(!file.exists("My_OAuth"))
#  {
#      file.create("My_OAuth.txt")
#      save(token, file= "My_OAuth.txt")
#  }
load("My_OAuth.txt")
rm(list = setdiff(ls(),c("token","FbObjectId") ))
nodes = c(
"Albums.",
"Comments",
"Events",
"Pages",
"Posts",
"Photos"
)
description = c(
"Contains location field. Often returns null",
"No location fields.",
"Usually includes location information under place field with a valid location.",
"Contains a location field, often yields no useful response.",
"Contains a place field, but usually returns NULL when requested.",
"Contains a place field for location."
)
summary = data.frame(nodes,description)
knitr::kable(summary,col.names = c("Nodes","Description"))
##Extracting my personnal information
my_Data = callAPI("https://graph.facebook.com/me", token)
## Extracting my ID, this can be passed on as the ids for other functions
my_id = my_Data$id
print(my_Data)
##Adding fields to the URL to gain specific information (birthday, age_range)
#no spaces anywhere within the URL should be included
my_Specific_Information_Request = "https://graph.facebook.com/me?fields=birthday,age_range"
my_Specific_Data = callAPI(my_Specific_Information_Request,token)
print("detailed Personal Data")
print(my_Specific_Data)
## the getPage function returns a matrix, and one of the columns is the "postId"
BBC_URL = "https://www.facebook.com/bbcnews"
BBC_Id = FbObjectId(BBC_URL,token)
## ONLY VALID for SIMPLE Webaddresses with no id in the URL, ex: www.facebook.com/harrypotter
FbObjectId = function(object_URL,token)
{
beginning_Index = 1
# Checking the formating of the "object_URL"
if(class(object_URL)!= "character"){
warning("Object_URL is not a string")
}else if( grep(pattern = "(http|https)://www.facebook.com(/.*)*"
, x=object_URL)!= beginning_Index ) {
warning("Invalid URL")
}
#formating and checking the complete URL request to the facebook Graph API
complete_URL = paste("https://graph.facebook.com",object_URL,sep = "/")
#print(complete_URL)
#Extracting the ID of the facebook object
url_Data = Rfacebook::callAPI(complete_URL,token)
url_id = url_Data$id
# If the Id is not numeric, something is wrong.
if(length( grep(pattern="www.facebook.com",x=url_id))!=0 ) {
warning("Error In Returned ID: Not numeric values.
URL likely not supported.")
}
url_id
}
## the getPage function returns a matrix, and one of the columns is the "postId"
BBC_URL = "https://www.facebook.com/bbcnews"
BBC_Id = FbObjectId(BBC_URL,token)
print(BBC_Id)
page_Information = getPage(BBC_Id,token,n=2)
class(page_Information)
dim(page_Information)
names(page_Information)
post_Ids = page_Information$id
## For URLs that yield no ids, the facebook would return a version of the
##URL address as the object ID.(just discovered)
## A URL of a post on the public facebook photo of Harry Potter
##(This should also return an error)
test1 = "https://www.facebook.com/harrypottermovie/photos/
a.422515109312.180796.156794164312/10155042492264313"
FbObjectId(test1,token)
